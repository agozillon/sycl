#!/bin/bash
# This is an extra layer of abstraction on top of the shell invocing the
# XOCC compiler. As SPIR/LLVM-IR is a second class citizen in XOCC for the
# moment it has some little niggling details that need worked on and the idea
# is that this script will work around those with some aid from Clang/LLVM.
#
# One of the main examples is that XOCC can only compile one kernel from LLVM-BC
# at a time and it requires the kernels name (also required for kernel specific
# optimizations). This poses a problem as there can be multiple kernels in a
# file. And when making a normal naked xocc -c command in the driver
# you won't have the neccesarry information as the command is generated before
# the file's have even started to be compiled (Perhaps there is that I am
# unaware of). So no kernel names and no idea how many xocc commands you'd need
# to generate per file (no idea how many kernels are in a file).
#
# This works around that by using an opt (kernelNameGen) pass that generates
# an intermediate file with the needed information that we eat up and can then
# loop over each kernel in a file. It's simple at the moment just kernel names,
# but could expand in the future to include optimization information for each
# kernel.
#
# Arguments:
# $1 == xocc's real shell invocation that invokes the xocc compiler
# $2 == path to the clang driver that's executing the shell script (e.g. 
#        your compiled Clang's build/bin)
# $3 == The name of the source file without file extensions or temporary 
#       manglings, mostly used to generate some intermediate file names
# $4 == The initial input file name, currently a .o file that's actually a .bc 
#       file in disguise       
# $5 == The systems temporary directory where we'll deposit some intermediate 
#       files
# $6 == The name we wish to give our final output .xcl binary, important that it
#       is consistent with what the driver expects it to be. 

# TODO: Pass an argument through the driver to set options like XILINX_PLATFORM, 
# the environment variables are a quick workaround to swap boards. 
usage() { echo xocc_compile: error: $2 >&2; exit $1; }

if [[ -z "$1" ]]; then
  usage 1 "no sdx bin directory containing xocc"
fi

if [[ -z "$2" ]]; then
  usage 2 "no driver path specified"
fi

if [[ -z "$3" ]]; then
  usage 3 "no source file name"
fi

if [[ -z "$4" ]]; then
  usage 4 "no input file name"
fi

if [[ -z "$5" ]]; then
  usage 5 "no temporary directory specified"
fi

if [[ -z "$6" ]]; then
  usage 6 "no final output file specified"
fi

# Hardcoded path from the bin directory that xocc is stored in, works for now 
# but a future TODO might be to allow this to be optionally specified as an 
# ENV variable 
XOCC_LIB_SPIR="$1/../lnx64/lib/libspir64-39-hls.bc"

# Perhaps not so important that the linker is the one packaged with the Clang
# build, but it's important that Opt is so that it's packaged with the correct 
# LLVM passes. 
OPT="$2/opt"
LLVM_LINK="$2/llvm-link"
XOCC="$1/xocc"

$OPT -O3 -asfix -globaldce -inSPIRation -globaldce -kernelNameGen "$4" -o \
  "$5/$3_kernels-optimized.bc"

# Link our XOCC SPIR binaries in 
$LLVM_LINK "$5/$3_kernels-optimized.bc" $XOCC_LIB_SPIR -o \
  "$5/$3_kernels-linked.xpirbc" 

# Our file containing the KernelNames is placed in the systems temporary 
# directory (or wherever the Clang driver is told is the temporary directory) 
# and is postfixed with the source files name. It's generated by the 
# kernelNameGen OPT pass 
KERNEL_NAME_FILE="$5/KernelNames_$3.txt"
DATA=$(<$KERNEL_NAME_FILE)

# Compile all Kernels in the source file to seperate .xo ("object") files
# and add them to the list of kernels to be linked
LINKER_LIST=""
while IFS= read -r X
do
if [[ -n "$X" ]]; then
  $XOCC --target $XCL_EMULATION_MODE --platform $XILINX_PLATFORM \
    --save-temps -c -k "$X" -o "$5/$X.xo" "$5/$3_kernels-linked.xpirbc" 
    LINKER_LIST="$5/$X.xo $LINKER_LIST"
fi
done <<< $DATA

$XOCC --target $XCL_EMULATION_MODE --platform $XILINX_PLATFORM -l \
  --save-temps -o "$6" $LINKER_LIST

# TODO: Cleanup temporary files we allocated in the systems tmp directory and 
# when --save-temps is fixed for SYCL compilation optionally keep them as they
# are quite useful when debugging
